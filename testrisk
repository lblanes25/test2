import pandas as pd
import re

# =============================================================================
# CONFIGURATION - UPDATE YOUR FILE/COLUMN NAMES HERE
# =============================================================================

# Input file names
RISKS_FILE = "audit_entity_risks.xlsx"
KPA_FILE = "kpa_tagging.xlsx"

# Sheet names
RISKS_SHEET = 0
KPA_SHEET = 0

# Column names in RISKS file (case-insensitive matching will be applied)
RISKS_AE_ID_COL = "Audit Entity ID"
RISKS_IT_COL = "Information Technology Inherent Risk"
RISKS_IS_COL = "Information Security Inherent Risk"
RISKS_PRIMARY_APPS_COL = "Primary IT applications (mapped)"
RISKS_SECONDARY_APPS_COL = "Secondary IT applications (mapped)"

# Column names in KPA file (case-insensitive matching will be applied)
KPA_AE_ID_COL = "Audit Entity"
KPA_ID_COL = "KPA ID"
KPA_KEY_APPS_COL = "KEY PRIMARY & SECONDARY IT applictions"

# Output file names
OUTPUT_FULL_ANALYSIS = "full_analysis_with_flags.xlsx"
OUTPUT_CRITICAL_ISSUES = "critical_issues_ghost_apps.xlsx"
OUTPUT_PRIMARY_ANALYSIS = "primary_apps_not_key_analysis.xlsx"
OUTPUT_SECONDARY_ANALYSIS = "secondary_apps_not_key_analysis.xlsx"
OUTPUT_EXECUTIVE_SUMMARY = "executive_summary.xlsx"

# Risk values that indicate the risk IS applicable
RISK_APPLICABLE_VALUES = ['Y', 'Yes', 'High', 'Medium', 'Moderate', 'H', 'M']

# =============================================================================
# LOAD DATA
# =============================================================================

print("="*70)
print("LOADING DATA")
print("="*70)

risks_df = pd.read_excel(RISKS_FILE, sheet_name=RISKS_SHEET)
kpa_df = pd.read_excel(KPA_FILE, sheet_name=KPA_SHEET)

print(f"✓ Loaded {len(risks_df)} audit entities from risks file")
print(f"✓ Loaded {len(kpa_df)} KPA records")
print()

# =============================================================================
# HELPER FUNCTION: CASE-INSENSITIVE COLUMN MATCHING
# =============================================================================

def find_column(df, target_col, optional=False):
    """
    Find a column in the dataframe using case-insensitive matching.
    Returns the actual column name from the dataframe.
    If optional=True, returns None if column not found.
    """
    if target_col is None:
        return None
        
    col_map = {col.lower().strip(): col for col in df.columns}
    actual_col = col_map.get(target_col.lower().strip())
    
    if actual_col is None and not optional:
        raise ValueError(f"Column '{target_col}' not found in dataframe. Available columns: {list(df.columns)}")
    
    return actual_col

# Map configured column names to actual column names
RISKS_AE_ID_ACTUAL = find_column(risks_df, RISKS_AE_ID_COL)
RISKS_IT_ACTUAL = find_column(risks_df, RISKS_IT_COL)
RISKS_IS_ACTUAL = find_column(risks_df, RISKS_IS_COL)
RISKS_PRIMARY_APPS_ACTUAL = find_column(risks_df, RISKS_PRIMARY_APPS_COL)
RISKS_SECONDARY_APPS_ACTUAL = find_column(risks_df, RISKS_SECONDARY_APPS_COL)

KPA_AE_ID_ACTUAL = find_column(kpa_df, KPA_AE_ID_COL)
KPA_ID_ACTUAL = find_column(kpa_df, KPA_ID_COL)
KPA_KEY_APPS_ACTUAL = find_column(kpa_df, KPA_KEY_APPS_COL)

print("="*70)
print("COLUMN MAPPING")
print("="*70)
print(f"✓ Risks file - AE ID: '{RISKS_AE_ID_ACTUAL}'")
print(f"✓ Risks file - IT Risk: '{RISKS_IT_ACTUAL}'")
print(f"✓ Risks file - IS Risk: '{RISKS_IS_ACTUAL}'")
print(f"✓ KPA file - AE ID: '{KPA_AE_ID_ACTUAL}'")
print()

# =============================================================================
# HELPER FUNCTION: PARSE MULTI-VALUE CELLS
# =============================================================================

def split_ids(value):
    """
    Convert comma/newline/semicolon-separated IDs into a clean list.
    Strips whitespace from each ID and filters out empty strings.
    """
    if pd.isna(value):
        return []
    ids = re.split(r'[\n,;]+', str(value).strip())
    return [x.strip() for x in ids if x.strip()]

# =============================================================================
# EXTRACT PRIMARY AND SECONDARY APPS PER AUDIT ENTITY
# =============================================================================

risks_df['Primary_List'] = risks_df[RISKS_PRIMARY_APPS_ACTUAL].apply(split_ids)
risks_df['Secondary_List'] = risks_df[RISKS_SECONDARY_APPS_ACTUAL].apply(split_ids)

ae_primary_map = dict(zip(risks_df[RISKS_AE_ID_ACTUAL], risks_df['Primary_List']))
ae_secondary_map = dict(zip(risks_df[RISKS_AE_ID_ACTUAL], risks_df['Secondary_List']))

# =============================================================================
# EXTRACT KEY-TAGGED APPS FROM KPA DATA (PER ENTITY)
# =============================================================================

kpa_df['Key_List'] = kpa_df[KPA_KEY_APPS_ACTUAL].apply(split_ids)

# Aggregate all Key apps per AE (across all KPAs)
kpa_key_map = (
    kpa_df.groupby(KPA_AE_ID_ACTUAL)['Key_List']
    .apply(lambda x: set([item for sublist in x for item in sublist]))
    .to_dict()
)

# =============================================================================
# MAIN ANALYSIS: BUILD COMPREHENSIVE DATASET
# =============================================================================

print("="*70)
print("ANALYZING DATA")
print("="*70)

rows = []

for ae_id in risks_df[RISKS_AE_ID_ACTUAL]:
    # Get primary and secondary apps
    primary_apps = ae_primary_map.get(ae_id, [])
    secondary_apps = ae_secondary_map.get(ae_id, [])
    
    # Get all mapped apps
    all_mapped_apps = set(primary_apps + secondary_apps)
    
    # Get Key apps for THIS entity's KPAs
    key_apps_set = kpa_key_map.get(ae_id, set())
    
    # ========== NEW: GHOST APP DETECTION ==========
    # Apps tagged as Key in KPAs but NOT mapped to this entity
    ghost_apps = [aid for aid in key_apps_set if aid and aid not in all_mapped_apps]
    
    # ========== PRIMARY APP ANALYSIS ==========
    # Find which Primary apps are Key
    primary_key = [aid for aid in primary_apps if aid and aid in key_apps_set]
    # Find which Primary apps are NOT Key
    primary_not_key = [aid for aid in primary_apps if aid and aid not in key_apps_set]
    
    # ========== SECONDARY APP ANALYSIS ==========
    # Find which Secondary apps are Key
    secondary_key = [aid for aid in secondary_apps if aid and aid in key_apps_set]
    # Find which Secondary apps are NOT Key
    secondary_not_key = [aid for aid in secondary_apps if aid and aid not in key_apps_set]
    
    # Calculate metrics
    total_primary = len([aid for aid in primary_apps if aid])
    total_secondary = len([aid for aid in secondary_apps if aid])
    total_apps = total_primary + total_secondary
    total_mapped_apps = len(all_mapped_apps)
    
    total_primary_key = len(primary_key)
    total_secondary_key = len(secondary_key)
    total_key_apps = len(key_apps_set)
    
    num_ghost_apps = len(ghost_apps)
    num_primary_not_key = len(primary_not_key)
    num_secondary_not_key = len(secondary_not_key)
    
    pct_primary_not_key = round((num_primary_not_key / total_primary) * 100, 1) if total_primary else 0
    pct_secondary_not_key = round((num_secondary_not_key / total_secondary) * 100, 1) if total_secondary else 0
    
    # Pull risk applicability
    risks_row = risks_df[risks_df[RISKS_AE_ID_ACTUAL] == ae_id]
    
    if len(risks_row) > 0:
        it_risk = risks_row[RISKS_IT_ACTUAL].values[0]
        is_risk = risks_row[RISKS_IS_ACTUAL].values[0]
    else:
        it_risk = 'N/A'
        is_risk = 'N/A'
    
    # Build output row
    rows.append({
        'Audit Entity ID': ae_id,
        
        # Mapping counts
        'Total Primary Apps': total_primary,
        'Total Secondary Apps': total_secondary,
        'Total Mapped Apps': total_mapped_apps,
        
        # Key designation counts
        'Primary Key Apps': total_primary_key,
        'Secondary Key Apps': total_secondary_key,
        'Total Key Apps': total_key_apps,
        
        # Issues - Ghost Apps (CRITICAL)
        '# Ghost Apps (Key but Not Mapped)': num_ghost_apps,
        'Ghost App IDs': ','.join(ghost_apps) if ghost_apps else '',
        
        # Issues - Primary Apps Not Key
        '# Primary Apps Not Key': num_primary_not_key,
        '% Primary Apps Not Key': pct_primary_not_key,
        'Primary Not Key IDs': ','.join(primary_not_key) if primary_not_key else '',
        
        # Issues - Secondary Apps Not Key
        '# Secondary Apps Not Key': num_secondary_not_key,
        '% Secondary Apps Not Key': pct_secondary_not_key,
        'Secondary Not Key IDs': ','.join(secondary_not_key) if secondary_not_key else '',
        
        # Risk status
        'IT Risk': it_risk,
        'IS Risk': is_risk
    })

# =============================================================================
# CREATE SUMMARY DATAFRAME
# =============================================================================

summary_df = pd.DataFrame(rows)

print(f"✓ Analyzed {len(summary_df)} audit entities")
print()

# =============================================================================
# HELPER FUNCTION: CHECK IF RISK IS APPLICABLE
# =============================================================================

def is_risk_applicable(risk_value):
    """Check if a risk value indicates the risk is applicable"""
    if pd.isna(risk_value):
        return False
    return str(risk_value).strip() in RISK_APPLICABLE_VALUES

# Add boolean columns
summary_df['IT Risk Applicable'] = summary_df['IT Risk'].apply(is_risk_applicable)
summary_df['IS Risk Applicable'] = summary_df['IS Risk'].apply(is_risk_applicable)
summary_df['Any IT/IS Risk Applicable'] = summary_df['IT Risk Applicable'] | summary_df['IS Risk Applicable']

# =============================================================================
# FLAG CRITICAL ISSUES
# =============================================================================

# CRITICAL: Ghost Apps (Key-tagged but not mapped)
summary_df['CRITICAL: Ghost Apps'] = summary_df['# Ghost Apps (Key but Not Mapped)'] > 0

# HIGH: Primary apps not Key
summary_df['HIGH: Primary Not Key'] = summary_df['# Primary Apps Not Key'] > 0

# HIGH: Secondary apps not Key
summary_df['HIGH: Secondary Not Key'] = summary_df['# Secondary Apps Not Key'] > 0

# COMBINED: Any mapping/tagging issues
summary_df['ANY ISSUE'] = (
    summary_df['CRITICAL: Ghost Apps'] |
    summary_df['HIGH: Primary Not Key'] |
    summary_df['HIGH: Secondary Not Key']
)

# Specific violation patterns
summary_df['Ghost Apps + No Risk'] = (
    (summary_df['# Ghost Apps (Key but Not Mapped)'] > 0) &
    (~summary_df['Any IT/IS Risk Applicable'])
)

summary_df['Primary Not Key + No Risk'] = (
    (summary_df['# Primary Apps Not Key'] > 0) &
    (summary_df['Total Primary Key Apps'] == 0) &  # NO Primary apps are Key
    (summary_df['Total Secondary Key Apps'] == 0) &  # NO Secondary apps are Key either
    (~summary_df['Any IT/IS Risk Applicable'])
)

summary_df['Secondary Not Key + No Risk'] = (
    (summary_df['# Secondary Apps Not Key'] > 0) &
    (summary_df['Total Key Apps'] == 0) &
    (~summary_df['Any IT/IS Risk Applicable'])
)

# =============================================================================
# CRITICAL ANALYSIS: GHOST APPS
# =============================================================================

print("="*70)
print("CRITICAL ISSUE: GHOST APPLICATIONS")
print("="*70)
print()
print("Ghost Apps = Applications tagged as Key in KPAs but NOT mapped to the entity")
print("Impact: Risk calculation uses WRONG applications")
print()

ghost_entities = summary_df[summary_df['CRITICAL: Ghost Apps']]
total_ghost_apps = summary_df['# Ghost Apps (Key but Not Mapped)'].sum()

if len(ghost_entities) > 0:
    print(f"⚠️  CRITICAL DATA INTEGRITY ISSUE DETECTED")
    print(f"   {len(ghost_entities)} entities have ghost applications ({len(ghost_entities)/len(summary_df)*100:.1f}%)")
    print(f"   {total_ghost_apps} total ghost apps affecting risk calculations")
    print(f"   ")
    print(f"   Avg ghost apps per affected entity: {total_ghost_apps/len(ghost_entities):.1f}")
    
    # Check how many have wrong risk
    ghost_no_risk = summary_df[summary_df['Ghost Apps + No Risk']]
    if len(ghost_no_risk) > 0:
        print(f"   {len(ghost_no_risk)} have ghost apps but NO IT/IS risk (automation failure)")
    
    print(f"   ")
    print(f"   These entities have INCORRECT risk ratings (using wrong apps)")
else:
    print(f"✓ No ghost applications detected")

print()

# =============================================================================
# PRIMARY APPS ANALYSIS
# =============================================================================

print("="*70)
print("PRIMARY APPLICATIONS NOT TAGGED AS KEY")
print("="*70)
print()

primary_issue_entities = summary_df[summary_df['HIGH: Primary Not Key']]
total_primary_not_key = summary_df['# Primary Apps Not Key'].sum()

print(f"Entities with Primary apps: {len(summary_df[summary_df['Total Primary Apps'] > 0])}")
print(f"Entities with Primary apps NOT Key: {len(primary_issue_entities)} ({len(primary_issue_entities)/len(summary_df)*100:.1f}%)")
print(f"Total Primary apps NOT tagged as Key: {total_primary_not_key}")
print()

if len(primary_issue_entities) > 0:
    # Check impact on risk
    primary_no_risk = summary_df[summary_df['Primary Not Key + No Risk']]
    primary_have_risk = primary_issue_entities[primary_issue_entities['Any IT/IS Risk Applicable']]
    
    print(f"📊 Impact Analysis:")
    print(f"   {len(primary_no_risk)} have Primary not Key + NO IT/IS risk")
    print(f"   └─ Confirmed understated risk")
    print(f"   ")
    print(f"   {len(primary_have_risk)} have Primary not Key + IT/IS risk from other apps")
    print(f"   └─ Risk MIGHT be understated (need ARA data to confirm)")
    print(f"   ")
    print(f"   Avg Primary apps not Key per entity: {primary_issue_entities['# Primary Apps Not Key'].mean():.1f}")
    
    # Distribution
    print(f"\n   Distribution:")
    print(f"   1-2 Primary apps not Key: {len(primary_issue_entities[primary_issue_entities['# Primary Apps Not Key'] <= 2])}")
    print(f"   3-5 Primary apps not Key: {len(primary_issue_entities[(primary_issue_entities['# Primary Apps Not Key'] > 2) & (primary_issue_entities['# Primary Apps Not Key'] <= 5)])}")
    print(f"   6+ Primary apps not Key: {len(primary_issue_entities[primary_issue_entities['# Primary Apps Not Key'] > 5])}")

print()

# =============================================================================
# SECONDARY APPS ANALYSIS
# =============================================================================

print("="*70)
print("SECONDARY APPLICATIONS NOT TAGGED AS KEY")
print("="*70)
print()

secondary_issue_entities = summary_df[summary_df['HIGH: Secondary Not Key']]
total_secondary_not_key = summary_df['# Secondary Apps Not Key'].sum()

print(f"Entities with Secondary apps: {len(summary_df[summary_df['Total Secondary Apps'] > 0])}")
print(f"Entities with Secondary apps NOT Key: {len(secondary_issue_entities)} ({len(secondary_issue_entities)/len(summary_df)*100:.1f}%)")
print(f"Total Secondary apps NOT tagged as Key: {total_secondary_not_key}")
print()

if len(secondary_issue_entities) > 0:
    # Check impact on risk
    secondary_no_risk = summary_df[summary_df['Secondary Not Key + No Risk']]
    secondary_have_risk = secondary_issue_entities[secondary_issue_entities['Any IT/IS Risk Applicable']]
    
    print(f"📊 Impact Analysis:")
    print(f"   {len(secondary_no_risk)} have Secondary not Key + NO IT/IS risk")
    print(f"   └─ Confirmed understated risk")
    print(f"   ")
    print(f"   {len(secondary_have_risk)} have Secondary not Key + IT/IS risk from other apps")
    print(f"   └─ Risk MIGHT be understated (need ARA data to confirm)")
    print(f"   ")
    print(f"   Avg Secondary apps not Key per entity: {secondary_issue_entities['# Secondary Apps Not Key'].mean():.1f}")

print()

# =============================================================================
# COMBINED ISSUES ANALYSIS
# =============================================================================

print("="*70)
print("COMBINED ISSUES")
print("="*70)
print()

any_issue = summary_df[summary_df['ANY ISSUE']]
print(f"Total entities with ANY mapping/tagging issue: {len(any_issue)} ({len(any_issue)/len(summary_df)*100:.1f}%)")
print()

# Multiple issues
ghost_and_primary = summary_df[(summary_df['CRITICAL: Ghost Apps']) & (summary_df['HIGH: Primary Not Key'])]
ghost_and_secondary = summary_df[(summary_df['CRITICAL: Ghost Apps']) & (summary_df['HIGH: Secondary Not Key'])]
primary_and_secondary = summary_df[(summary_df['HIGH: Primary Not Key']) & (summary_df['HIGH: Secondary Not Key'])]
all_three = summary_df[(summary_df['CRITICAL: Ghost Apps']) & (summary_df['HIGH: Primary Not Key']) & (summary_df['HIGH: Secondary Not Key'])]

print(f"Entities with multiple issues:")
print(f"   Ghost + Primary not Key: {len(ghost_and_primary)}")
print(f"   Ghost + Secondary not Key: {len(ghost_and_secondary)}")
print(f"   Primary + Secondary not Key: {len(primary_and_secondary)}")
print(f"   All three issues: {len(all_three)}")

print()

# =============================================================================
# EXPORT RESULTS
# =============================================================================

print("="*70)
print("EXPORTING RESULTS")
print("="*70)

# Export 1: Full analysis
summary_df_export = summary_df.copy()
# Reorder columns for clarity
cols_order = [
    'Audit Entity ID',
    'CRITICAL: Ghost Apps',
    'HIGH: Primary Not Key',
    'HIGH: Secondary Not Key',
    '# Ghost Apps (Key but Not Mapped)',
    '# Primary Apps Not Key',
    '# Secondary Apps Not Key',
    'Total Primary Apps',
    'Total Secondary Apps',
    'Primary Key Apps',
    'Secondary Key Apps',
    'Total Key Apps',
    'IT Risk',
    'IS Risk',
    'Any IT/IS Risk Applicable'
]
# Add remaining columns
remaining_cols = [col for col in summary_df.columns if col not in cols_order]
summary_df_export = summary_df_export[cols_order + remaining_cols]

summary_df_export.to_excel(OUTPUT_FULL_ANALYSIS, index=False)
print(f"✓ {OUTPUT_FULL_ANALYSIS}")

# Export 2: Ghost Apps (CRITICAL)
if len(ghost_entities) > 0:
    ghost_export = ghost_entities.sort_values('# Ghost Apps (Key but Not Mapped)', ascending=False)
    ghost_export.to_excel(OUTPUT_CRITICAL_ISSUES, index=False)
    print(f"✓ {OUTPUT_CRITICAL_ISSUES}")

# Export 3: Primary Apps Not Key
if len(primary_issue_entities) > 0:
    primary_export = primary_issue_entities.sort_values('# Primary Apps Not Key', ascending=False)
    primary_export.to_excel(OUTPUT_PRIMARY_ANALYSIS, index=False)
    print(f"✓ {OUTPUT_PRIMARY_ANALYSIS}")

# Export 4: Secondary Apps Not Key
if len(secondary_issue_entities) > 0:
    secondary_export = secondary_issue_entities.sort_values('# Secondary Apps Not Key', ascending=False)
    secondary_export.to_excel(OUTPUT_SECONDARY_ANALYSIS, index=False)
    print(f"✓ {OUTPUT_SECONDARY_ANALYSIS}")

# Export 5: Executive Summary
exec_summary = pd.DataFrame([
    {'Metric': 'Total Entities Analyzed', 'Value': len(summary_df), 'Severity': ''},
    {'Metric': '', 'Value': '', 'Severity': ''},
    {'Metric': 'CRITICAL: Ghost Applications', 'Value': '', 'Severity': 'CRITICAL'},
    {'Metric': '└─ Entities with ghost apps', 'Value': len(ghost_entities), 'Severity': ''},
    {'Metric': '└─ Total ghost apps', 'Value': int(total_ghost_apps), 'Severity': ''},
    {'Metric': '└─ Impact', 'Value': 'Risk ratings using WRONG apps', 'Severity': ''},
    {'Metric': '', 'Value': '', 'Severity': ''},
    {'Metric': 'HIGH: Primary Apps Not Tagged as Key', 'Value': '', 'Severity': 'HIGH'},
    {'Metric': '└─ Entities affected', 'Value': len(primary_issue_entities), 'Severity': ''},
    {'Metric': '└─ Total Primary apps not Key', 'Value': int(total_primary_not_key), 'Severity': ''},
    {'Metric': '└─ With NO IT/IS risk', 'Value': len(primary_no_risk) if len(primary_issue_entities) > 0 else 0, 'Severity': ''},
    {'Metric': '└─ With IT/IS risk (unknown if correct)', 'Value': len(primary_have_risk) if len(primary_issue_entities) > 0 else 0, 'Severity': ''},
    {'Metric': '', 'Value': '', 'Severity': ''},
    {'Metric': 'HIGH: Secondary Apps Not Tagged as Key', 'Value': '', 'Severity': 'HIGH'},
    {'Metric': '└─ Entities affected', 'Value': len(secondary_issue_entities), 'Severity': ''},
    {'Metric': '└─ Total Secondary apps not Key', 'Value': int(total_secondary_not_key), 'Severity': ''},
    {'Metric': '└─ With NO IT/IS risk', 'Value': len(secondary_no_risk) if len(secondary_issue_entities) > 0 else 0, 'Severity': ''},
    {'Metric': '└─ With IT/IS risk (unknown if correct)', 'Value': len(secondary_have_risk) if len(secondary_issue_entities) > 0 else 0, 'Severity': ''},
    {'Metric': '', 'Value': '', 'Severity': ''},
    {'Metric': 'TOTAL ENTITIES WITH ANY ISSUE', 'Value': len(any_issue), 'Severity': ''},
    {'Metric': '└─ % of total', 'Value': f"{len(any_issue)/len(summary_df)*100:.1f}%", 'Severity': ''},
])
exec_summary.to_excel(OUTPUT_EXECUTIVE_SUMMARY, index=False)
print(f"✓ {OUTPUT_EXECUTIVE_SUMMARY}")

# =============================================================================
# FINAL SUMMARY
# =============================================================================

print("\n" + "="*70)
print("ANALYSIS COMPLETE")
print("="*70)
print(f"\n📊 Summary of Issues:")
print(f"   CRITICAL - Ghost Apps: {len(ghost_entities)} entities, {int(total_ghost_apps)} apps")
print(f"   HIGH - Primary Not Key: {len(primary_issue_entities)} entities, {int(total_primary_not_key)} apps")
print(f"   HIGH - Secondary Not Key: {len(secondary_issue_entities)} entities, {int(total_secondary_not_key)} apps")
print(f"   ")
print(f"   Total entities with issues: {len(any_issue)} ({len(any_issue)/len(summary_df)*100:.1f}%)")
print("\n" + "="*70)
```

---

## **What This Script Now Does**

### **1. Ghost App Detection (NEW - CRITICAL)**
- Identifies apps tagged as Key in KPAs but NOT mapped to the entity
- These cause WRONG risk calculations
- Highest priority issue

### **2. Primary Apps Not Key Analysis (NEW)**
- Shows which Primary apps aren't tagged as Key
- Counts and percentages
- Impact on risk (none vs. might be understated)

### **3. Secondary Apps Not Key Analysis (ENHANCED)**
- Your original finding
- Now shows impact more clearly
- Distinguishes confirmed vs. potential understatement

### **4. Combined Analysis (NEW)**
- Shows entities with multiple issues
- Helps prioritize worst cases

---

## **Output Files**

### **File 1: `full_analysis_with_flags.xlsx`**
Complete dataset with all metrics and flags

**Key columns:**
- `CRITICAL: Ghost Apps` - TRUE/FALSE flag
- `HIGH: Primary Not Key` - TRUE/FALSE flag
- `HIGH: Secondary Not Key` - TRUE/FALSE flag
- `# Ghost Apps (Key but Not Mapped)` - count
- `Ghost App IDs` - comma-separated list
- `# Primary Apps Not Key` - count
- `Primary Not Key IDs` - comma-separated list
- `# Secondary Apps Not Key` - count
- `Secondary Not Key IDs` - comma-separated list

### **File 2: `critical_issues_ghost_apps.xlsx`**
Only entities with ghost apps - INVESTIGATE THESE FIRST

### **File 3: `primary_apps_not_key_analysis.xlsx`**
All entities with Primary apps not tagged as Key

### **File 4: `secondary_apps_not_key_analysis.xlsx`**
All entities with Secondary apps not tagged as Key

### **File 5: `executive_summary.xlsx`**
One-page summary with counts and severity

---

## **After Running the Script**

### **Step 1: Check Console Output**

Look for:
```
⚠️ CRITICAL DATA INTEGRITY ISSUE DETECTED
   XX entities have ghost applications
   XXX total ghost apps affecting risk calculations
```

**Write down:**
- # entities with ghost apps: _____
- # total ghost apps: _____

### **Step 2: Review Executive Summary**

Open `executive_summary.xlsx`

**Write down the key numbers:**
```
Ghost Apps:
- Entities: _____
- Total apps: _____

Primary Not Key:
- Entities: _____
- Total apps: _____
- With NO risk: _____
- With risk (unknown if correct): _____

Secondary Not Key:
- Entities: _____
- Total apps: _____
- With NO risk: _____
- With risk (unknown if correct): _____
```

### **Step 3: Investigate Ghost Apps (PRIORITY 1)**

Open `critical_issues_ghost_apps.xlsx`

**Sort by `# Ghost Apps (Key but Not Mapped)` (descending)**

**Pick top 5-10 for investigation**

For each:
1. What are the ghost app IDs?
2. Where do those apps actually belong? (check other entities)
3. What apps SHOULD be in the KPA instead?
4. Is the risk rating wrong?

### **Step 4: Investigate Primary Apps Not Key**

Open `primary_apps_not_key_analysis.xlsx`

**Filter/Sort options:**

**Option A: Entities with NO risk (confirmed issue)**
```
Filter: Any IT/IS Risk Applicable = FALSE
Sort by: # Primary Apps Not Key (descending)
```

**Option B: Entities with highest counts**
```
Sort by: # Primary Apps Not Key (descending)
Take top 10
```

**For sampling:**
- Pick 5 with NO risk
- Pick 5 with risk (to see if risk is understated)

### **Step 5: Investigate Secondary Apps Not Key**

Open `secondary_apps_not_key_analysis.xlsx`

Same approach as Primary apps

### **Step 6: Look for Patterns in Full Analysis**

Open `full_analysis_with_flags.xlsx`

**Create Pivot Table:**

**Rows:** All three flag columns
- CRITICAL: Ghost Apps
- HIGH: Primary Not Key  
- HIGH: Secondary Not Key

**Values:** Count of Audit Entity ID

**This shows you the distribution:**
```
Ghost=Yes, Primary=Yes, Secondary=Yes: X entities (worst)
Ghost=Yes, Primary=No, Secondary=Yes: X entities
Ghost=No, Primary=Yes, Secondary=Yes: X entities
... etc
